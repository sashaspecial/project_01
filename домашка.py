# -*- coding: utf-8 -*-
"""домашка.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bIbqZ1UhrK9ObwpDyZrr6X9D_dlEYrTU

Задача 1.1
"""

# Есть строка с перечислением песен
# Выведите на консоль с помощью индексации строки, последовательно: первый трек, последний, второй, второй с конца
# Нельзя переопределять my_favorite_songs и запятая не должна выводиться.

my_favorite_songs = 'Waste a Moment, Staying\' Alive, A Sorta Fairytale, Start Me Up, New Salvation'
x = my_favorite_songs[0:14]
print(x)
y = my_favorite_songs[-13:]
print(y)
z = my_favorite_songs[16:30]
print(z)
q = my_favorite_songs[51:62]
print(q)

"""Задача 1.2 А"""

# Приведем плейлист песен в виде списка списков
# Список my_favorite_songs содержит список названий и длительности каждого трека
# Выведите общее время звучания трех случайных песен в формате
# Три песни звучат ХХХ минут

my_favorite_songs = [
    ['Waste a Moment', 3.03],
    ['New Salvation', 4.02],
    ['Staying\' Alive', 3.40],
    ['Out of Touch', 3.03],
    ['A Sorta Fairytale', 5.28],
    ['Easy', 4.15],
    ['Beautiful Day', 4.04],
    ['Nowhere to Run', 2.58],
    ['In This World', 4.02],
]

import random
number_song_1 = int(random.uniform(0, 8))
number_song_2 = int(random.uniform(0, 8))
number_song_3 = int(random.uniform(0, 8))

song_1 = my_favorite_songs[number_song_1]
song_2 = my_favorite_songs[number_song_2]
song_3 = my_favorite_songs[number_song_3]

time_song_1 = song_1[1]
time_song_2 = song_2[1]
time_song_3 = song_3[1]

second_song1 = round(time_song_1%1, 2)
minute_song1 = time_song_1 - second_song1
hexsecond_1 = second_song1 * 100 / 60

second_song2 = round(time_song_2%1, 2)
minute_song2 = time_song_2 - second_song2
hexsecond_2 = second_song2 * 100 / 60

second_song3 = round(time_song_3%1, 2)
minute_song3 = time_song_3 - second_song3
hexsecond_3 = second_song3 * 100 / 60

all_second = (hexsecond_1 + hexsecond_2 + hexsecond_3)
all_minute = round(minute_song1 + minute_song2 + minute_song3 + all_second)

print("Три песни звучат", all_minute, "минут")

"""Задча 1.2 В"""

# Есть словарь песен 
# Распечатайте общее время звучания трех случайных песен
# Вывод: Три песни звучат ХХХ минут.

my_favorite_songs_dict = {
    'Waste a Moment': 3.03,
    'New Salvation': 4.02,
    'Staying\' Alive': 3.40,
    'Out of Touch': 3.03,
    'A Sorta Fairytale': 5.28,
    'Easy': 4.15,
    'Beautiful Day': 4.04,
    'Nowhere to Run': 2.58,
    'In This World': 4.02,
}

import random
from random import sample
songs = list(my_favorite_songs_dict.items())
x = sample(songs, 3)

number_song_1 = int(random.uniform(0, 2))
number_song_2 = int(random.uniform(0, 2))
number_song_3 = int(random.uniform(0, 2))

song_1 = x[number_song_1]
song_2 = x[number_song_2]
song_3 = x[number_song_3]

time_song_1 = song_1[1]
time_song_2 = song_2[1]
time_song_3 = song_3[1]

second_song1 = round(time_song_1%1, 2)
minute_song1 = time_song_1 - second_song1
hexsecond_1 = second_song1 * 100 / 60

second_song2 = round(time_song_2%1, 2)
minute_song2 = time_song_2 - second_song2
hexsecond_2 = second_song2 * 100 / 60

second_song3 = round(time_song_3%1, 2)
minute_song3 = time_song_3 - second_song3
hexsecond_3 = second_song3 * 100 / 60

all_second = (hexsecond_1 + hexsecond_2 + hexsecond_3)
all_minute = round(minute_song1 + minute_song2 + minute_song3 + all_second)

print("Три песни звучат", all_minute, "минут")

"""Задача 1.3"""

# Напишите скрипт, который принимает от пользователя номер месяца, 
# а возвращает количество дней в нем.
# Результат проверки вывести на консоль
# Допущение: в феврале 28 дней
# Если номер месяца некорректен - сообщить об этом

months_day_count = {'1':  31,
                    '2':  28,
                    '3':  31,
                    '4':  30,
                    '5':  31,
                    '6':  30,
                    '7':  31,
                    '8':  31,
                    '9':  30,
                    '10': 31,
                    '11': 30,
                    '12': 31,
                    }

user_input = input("Введите номер месяца: ")
if user_input.isdigit():
    month = int(user_input)

    if 1 <= month <= 12:
        day_count = months_day_count[user_input]
        print("Вы ввели", month, ".", day_count, "дней")
        
    else:
        print("Такого месяца нет!")

"""Задача 1.4"""

# Есть словарь кодов товаров titles

titles = {
    'Кроссовки тип 3 (Adidas)': '100000110',
    'Мячик тип 2 (Adidas)': '100000146',
    'Кепка тип 1 (Adidas)': '100000149',
    'Ремень тип 2 (Nike)': '100000194',
    'Футболка тип 1 (Adidas)': '100000224',
    'Шапка тип 5 (Puma)': '100000280',
}
# Товары находятся на складе и сохранены в виде словаря списков словарей,
# которые отражают количество товаров в магазине по каждому коду.
store = {
    '100000110': [{'quantity': 31, 'price': 1637}],
    '100000146': [ {'quantity': 4, 'price': 45}, {'quantity': 10, 'price': 48}],
    '100000149': [ {'quantity': 28, 'price': 279}, {'quantity': 32, 'price': 291}],
    '100000194': [{'quantity': 8, 'price': 220}, {'quantity': 1, 'price': 170}],
    '100000224': [{'quantity': 61, 'price': 438}, {'quantity': 23, 'price': 302},  {'quantity': 50, 'price': 412}],
    '100000280': [{'quantity': 26, 'price': 175}, ]
}
# Рассчитайте на какую сумму лежит каждого товара на складе.
#
# Вывести суммарную стоимость каждого товара в магазине в формате:
# "<товар> - <кол-во> шт, стоимость <общая стоимость> руб"
# Пример: "Кроссовки тип 3 (Adidas) - 31 шт, стоимость 50747 руб"
for item in titles:
    item_name = item
    item_code = titles[item]
    item_quantity, item_total_amount = 0, 0
 
    for i in store[item_code]:
        item_quantity += i['quantity']
        item_total_amount += i['price'] * i['quantity']
 
    print(item_name, item_quantity, 'шт, стоимость', item_total_amount, 'руб')

"""Задача 2.1"""

# Создайте две функции maximum и minimum,
# которые получают список целых чисел в качестве входных данных 
# и возвращают наибольшее и наименьшее число в этом списке соответственно.
# Например,
# * [4,6,2,1,9,63,-134,566]         -> max = 566, min = -134
# * [-52, 56, 30, 29, -54, 0, -110] -> min = -110, max = 56
# * [42, 54, 65, 87, 0]             -> min = 0, max = 87
# * [5]                             -> min = 5, max = 5
# функции max и min использовать нельзя!

arr = [[4,6,2,1,9,63,-134,566], [-52, 56, 30, 29, -54, 0, -110], [42, 54, 65, 87, 0], [5]]

def default(data):
  for data in arr:
    data = sorted(data)
    return data
def minimum(arr):
  for data in arr:
    data = sorted(data)
    print("минимальные значения из массива: ", data, min(data))
def maximum(arr):
  for data in arr:
    data = sorted(data)
    print("максимальные значения из массива: ", data, max(data))
def main():
  print(minimum(arr))
  print(maximum(arr))
print(main())

"""Задача 2.2"""

# Напишите функцию, которая возвращает номер квартал по номеру месяца
# Например: 
# месяц 2 (февраль) является частью первого квартала; 
# месяц 6 (июнь) является частью второго квартала; 
# месяц 11 (ноябрь) является частью четвертого квартала.


def quarter_of(month: int) -> str:
    match month:
        case 1 | 2 | 3:
            return "Является частью первого квартала"
        case 4 | 5 | 6:
            return "Является частью второго квартала"
        case 7 | 8 | 9:
            return "Является частью третьего квартала"
        case 10 | 11 | 12:
            return "Является частью четвертого квартала"
        case _:
            return "Error"
print(quarter_of(int(input())))

"""Задача 2.3"""

# Напишите функцию, которая принимает цифры от 0 до 9 и возвращает значение прописью.
# Например,
# switch_it_up(1) -> 'One'
# switch_it_up(3) -> 'Three'
# switch_it_up(10000) -> None
# Использовать условный оператор if-elif-else нельзя!

def switch_it_up(number):
  f = {0: "ноль", 1: 'один', 2: 'два', 3: 'три', 4: 'четыре', 5: 'пять',
         6: 'шесть', 7: 'семь', 8: 'восемь', 9: 'девять'}
  if number < 10:
    return f.get(0)

"""Задача 2.4"""

# Пункт A.
# Напишите функцию, которая удаляет все восклицательные знаки из заданной строк.
# Например,
# foo("Hi! Hello!") -> "Hi Hello"
# foo("") -> ""
# foo("Oh, no!!!") -> "Oh, no"

def remove_exclamation_marks(s):
    return s.replace("!", "")



# Пункт B.
# Удалите восклицательный знак из конца строки. 
# remove("Hi!") == "Hi"
# remove("Hi!!!") == "Hi!!"
# remove("!Hi") == "!Hi"

def remove_last_em(s):
  i = 0
  while i < 1 and s[-1]=="!":
    s = s[:-1]
    i+=1
  return s

"""Задача 3.1"""

# Задача 3.1.
# Создайте класс матрицы (или таблицы).
# Требования к классу:
#   - каждая колонка является числом от 1 до n (n любое число, которые вы поставите!)
#   - в каждой ячейке содержится либо число, либо None
#   - доступы следующие методы матрицы:
#       * принимать новые значения, 
#       * заменять существующие значения, 
#       * выводить число строк и колонок.

# Пример матрицы 10 на 10 из единиц:
# [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

# Примечание! 
#   - новый класс не запрещено строить на базе существующих типов данных: списков, словарей и тд.
#   - отображать в таблице/матрице название колонки не обязательно!
#   - использовать готовые классы numpy.array() и pandas.DataFrame() запрещено!
#   - проявите фантазию :)
class Matrix:
    def __init__(self, list_of_lists):
        self.matrix = deepcopy(list_of_lists)

"""Задача 4.1"""

# Задача 4.1.
# Домашнее задание на SQL

# В базе данных teacher создайте таблицу Students

# Структура таблицы: Student_Id - Integer, Student_Name - Text, School_Id - Integer (Primary key????? опечатка????)

# Наполните таблицу следующими данными:

# 201, Иван, 1
# 202, Петр, 2
# 203, Анастасия, 3
# 204, Игорь, 4

# Напишите программу, с помощью которой по ID студента можно получать информацию о школе и студенте.
# Формат вывода:

# ID Студента:
# Имя студента:
# ID школы:
# Название школы:

# -- CREATE TABLE students (
# -- Student_ID INTEGER NOT NULL PRIMARY KEY,
# -- Student_Name TEXT NOT NULL,
# -- School_ID INTEGER not NULL);
# -- INSERT into students (Student_ID, Student_Name, School_ID)
# -- Values 
# --('201', 'Иван', '1'),
# --('202', 'Петр', '2'),
# --('203', 'Анастасия', '3'),
# --('204', 'Игорь', '4');
# -- SELECT * FROM students;
#-- SELECT * FROM School;
#-- SELECT School.School_Name, students.Student_ID, students.Student_Name, students.School_ID
#-- FROM students
#-- LEFT JOIN School on students.school_ID = School.school_id;
#-- SELECT * FROM students;
import sqlite3
def get_connection():
  connection = sqlite3.connect('teachers.db')
  return connection
def close_connection(connection):
  if connection:
    connection.close()
def get_detail(student_id):
  try:
    connection = get_connection()
    cursor = connection.cursor()
    sqlquare = "SELECT * FROM students WHERE Student_Id = ?"
    cursor.execute(sqlquare,(student_id,))
    records = cursor.fetchall()
    for row in records:
      print("ID студента: ", row[0])
      print("Имя студента: ", row[1])
      print("ID школы: ", row[2])
    close_connection(connection)
  except (Exception, sqlite3.Error) as error:
    print('ошибка в получении данных', error)
get_detail(201)